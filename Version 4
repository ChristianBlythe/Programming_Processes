from tkinter import * 
from tkinter import messagebox as mb 
import sqlite3
window=Tk()
window.geometry("1280x1080")

def login():
	def login_database():
		conn=sqlite3.connect("1.db")
		cur=conn.cursor()
		cur.execute("SELECT * FROM test WHERE email=? AND password=?",(e1.get(),e2.get()))
		row=cur.fetchall()
		conn.close()
		print(row)
		if row!=[]:
			user_name=row[0][1]
			l3.config(text="You have successfully logged in, please click the X in the top right to access the quiz. User: "+user_name )
		else:
			l3.config(text="Account details are wrong please try again ")
			return



	window.destroy()
	login_window=Tk()
	login_window.geometry("1280x1080")
	l1=Label(login_window,text="email",font="times 20")
	l1.grid(row=1,column=1)
	l2=Label(login_window,text="password",font="times 20")
	l2.grid(row=2,column=1)
	l3=Label(login_window,font="times 20")
	l3.grid(row=5,column=2)

	email_text=StringVar()
	e1=Entry(login_window,textvariable=email_text)
	e1.grid(row=1,column=2)
	password_text=StringVar()
	e2=Entry(login_window,textvariable=password_text)
	e2.grid(row=2,column=2)


	b1=Button(login_window,text="login",width=20,command=login_database)
	b1.grid(row=4,column=2)
	login_window.mainloop()




def signup():


	def signup_database():
		conn=sqlite3.connect("1.db")
		cur=conn.cursor()
		cur.execute("CREATE TABLE IF NOT EXISTS test(id INTEGER PRIMARY KEY,name text,email text, password text)")
		cur.execute("INSERT INTO test Values(Null,?,?,?)",(e1.get(),e2.get(),e3.get()))
		l4=Label(signup_window,text="account created please click the X in the top right corner to access quiz",font="times 15")
		l4.grid(row=6,column=2)
		conn.commit()
		conn.close()





	window.destroy()
	signup_window=Tk()
	signup_window.geometry("1280x1080")
	l1=Label(signup_window,text="user name",font="times 20")
	l1.grid(row=1,column=1)
	l2=Label(signup_window,text="user email",font="times 20")
	l2.grid(row=2,column=1)
	l3=Label(signup_window,text="user password",font="times 20")
	l3.grid(row=3,column=1)


	name_text=StringVar()
	e1=Entry(signup_window,textvariable=name_text)
	e1.grid(row=1,column=2)
	email_text=StringVar()
	e2=Entry(signup_window,textvariable=email_text)
	e2.grid(row=2,column=2)
	password_text=StringVar()
	e3=Entry(signup_window,textvariable=password_text)
	e3.grid(row=3,column=2)

	b1=Button(signup_window,text="login",width=20,command=signup_database)
	b1.grid(row=4,column=2)







l1=Label(window,text="Please select what you would like to do",font="times 20")
l1.grid(row=1,column=2,columnspan=2)

b1=Button(window,text="login",width=20,command=login)
b1.grid(row=2,column=2)

b2=Button(window,text="signup",width=20,command=signup)
b2.grid(row=2,column=3)


window.mainloop()
#These are list of questions 

q=["What is the formula for water?", 

    "What is the formula for Ammonia?", 

   "What is the formula for Carboxylic acid?", 

   "What is the symbol for lead?",
   
   "What do primary alcohols oxidise to?",
   
   "What do secondary alcohols oxidise to?",
   
   "What colour does bromine water go to if it is mixed with an Alkene?",
   
   "What is the molecular formula for Alkenes?",
   
   "What is the atomic number for Hydrogen?",
   
   "Who created the periodic table?",

   ] 

#These are the options with one right answer in them 

options=[ 

         ['CO2','H2O','NH2','H2O2'],['Am','NH3','NaHCO3','HCl',], 

         ['COOH','KCl','NaCl','COH'],['L','Ag','Pb','Li',],
         
         ['Carboxylic acids','Ketones','Aldehydes','Salt',],
         
         ['Aldehydes','Acyl Chloride','Carboxylic Acid','Ketone',],
         
         ['Green','Orange','Brown','Colourless',],['CnH2n+1','CnH2n','CnH2n+2','CnH2n-2',],
         
         ['4','3','1','6',],['Dmitri Mendeleev','Ivan Pavlov','Albert Einstein','Thomas Edison',],	
         
         
         
         
         ]

  

#These are the only correct answers 
a=[2,2,1,3,3,4,4,2,3,1] 





root = Tk() 

root.geometry("800x500") 

root.title("Quiz") 

  

  

class Quiz: 

    def __init__(self): 

        self.qn = 0 

        self.ques = self.question(self.qn) 

##        self.images=images 

         

        self.opt_selected = IntVar() 

        self.opts = self.radiobtns() 

        self.display_options(self.qn) 

        self.buttons() 

        self.correct = 0 

  

  

    def question(self, qn): 

        t = Label(root, text="chemistry quiz", width=50, bg="blue", fg="white", font=("times", 20, "bold")) 

        t.place(x=0, y=2) 

        qn = Label(root, text=q[qn], width=60, font=("times", 16, "bold"), anchor="w") 

        qn.place(x=70, y=100) 

        return qn 

  

    def radiobtns(self): 

        val = 0 

        b = [] 

        yp = 150 

        while val < 4: 

            btn = Radiobutton(root, text=" ", variable=self.opt_selected, value=val + 1, font=("times", 14)) 

            b.append(btn) 

            btn.place(x=100, y=yp) 

            val += 1 

            yp += 40 

        return b 

  

    def display_options(self, qn): 

        val = 0 

        self.opt_selected.set(0) 

        self.ques['text'] = q[qn] 

        for op in options[qn]: 

              self.opts[val]['text'] = op 

              val += 1 

     
    def buttons(self): 

        nbutton = Button(root, text="Next",command=self.nextbtn, width=10,bg="green",fg="white",font=("times",16,"bold")) 

        nbutton.place(x=200,y=380) 

        quitbutton = Button(root, text="Quit", command=root.destroy,width=10,bg="red",fg="white", font=("times",16,"bold")) 

        quitbutton.place(x=380,y=380) 

  

    def checkans(self, qn): 

        if self.opt_selected.get() == a[qn]: 

             return True 

         

    def nextbtn(self): 

        if self.checkans(self.qn): 

            self.correct += 1 

        self.qn += 1 

        if self.qn == len(q): 

            self.display_result() 

        else: 

            self.display_options(self.qn)        


  

    def display_result(self): 

        score = int(self.correct / len(q) * 100) 

        result = "Score: " + str(score) + "%" 

        wc = len(q) - self.correct 

        correct = "No. of correct answers: " + str(self.correct) 

        wrong = "No. of wrong answers: " + str(wc) 

        mb.showinfo("Result", "\n".join([result, correct, wrong])) 

quiz=Quiz() 

root.mainloop() 
